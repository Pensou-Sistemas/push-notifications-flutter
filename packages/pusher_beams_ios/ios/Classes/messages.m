// Autogenerated from Pigeon (v22.4.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "messages.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray<id> *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}

static FlutterError *createConnectionError(NSString *channelName) {
  return [FlutterError errorWithCode:@"channel-error" message:[NSString stringWithFormat:@"%@/%@/%@", @"Unable to establish connection on channel: '", channelName, @"'."] details:@""];
}

static id GetNullableObjectAtIndex(NSArray<id> *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface PGNBeamsAuthProvider ()
+ (PGNBeamsAuthProvider *)fromList:(NSArray<id> *)list;
+ (nullable PGNBeamsAuthProvider *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@implementation PGNBeamsAuthProvider
+ (instancetype)makeWithAuthUrl:(nullable NSString *)authUrl
    headers:(nullable NSDictionary<NSString *, NSString *> *)headers
    queryParams:(nullable NSDictionary<NSString *, NSString *> *)queryParams
    credentials:(nullable NSString *)credentials {
  PGNBeamsAuthProvider* pigeonResult = [[PGNBeamsAuthProvider alloc] init];
  pigeonResult.authUrl = authUrl;
  pigeonResult.headers = headers;
  pigeonResult.queryParams = queryParams;
  pigeonResult.credentials = credentials;
  return pigeonResult;
}
+ (PGNBeamsAuthProvider *)fromList:(NSArray<id> *)list {
  PGNBeamsAuthProvider *pigeonResult = [[PGNBeamsAuthProvider alloc] init];
  pigeonResult.authUrl = GetNullableObjectAtIndex(list, 0);
  pigeonResult.headers = GetNullableObjectAtIndex(list, 1);
  pigeonResult.queryParams = GetNullableObjectAtIndex(list, 2);
  pigeonResult.credentials = GetNullableObjectAtIndex(list, 3);
  return pigeonResult;
}
+ (nullable PGNBeamsAuthProvider *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [PGNBeamsAuthProvider fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.authUrl ?: [NSNull null],
    self.headers ?: [NSNull null],
    self.queryParams ?: [NSNull null],
    self.credentials ?: [NSNull null],
  ];
}
@end

@interface PGNMessagesPigeonCodecReader : FlutterStandardReader
@end
@implementation PGNMessagesPigeonCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 129: 
      return [PGNBeamsAuthProvider fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface PGNMessagesPigeonCodecWriter : FlutterStandardWriter
@end
@implementation PGNMessagesPigeonCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[PGNBeamsAuthProvider class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface PGNMessagesPigeonCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation PGNMessagesPigeonCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[PGNMessagesPigeonCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[PGNMessagesPigeonCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *PGNGetMessagesCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    PGNMessagesPigeonCodecReaderWriter *readerWriter = [[PGNMessagesPigeonCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}
void SetUpPusherBeamsApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<PusherBeamsApi> *api) {
  SetUpPusherBeamsApiWithSuffix(binaryMessenger, api, @"");
}

void SetUpPusherBeamsApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<PusherBeamsApi> *api, NSString *messageChannelSuffix) {
  messageChannelSuffix = messageChannelSuffix.length > 0 ? [NSString stringWithFormat: @".%@", messageChannelSuffix] : @"";
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.pusher_beams.PusherBeamsApi.start", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:PGNGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startInstanceId:error:)], @"PusherBeamsApi api (%@) doesn't respond to @selector(startInstanceId:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSString *arg_instanceId = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api startInstanceId:arg_instanceId error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.pusher_beams.PusherBeamsApi.getInitialMessage", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:PGNGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getInitialMessageWithCompletion:)], @"PusherBeamsApi api (%@) doesn't respond to @selector(getInitialMessageWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api getInitialMessageWithCompletion:^(NSDictionary<NSString *, NSObject *> *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.pusher_beams.PusherBeamsApi.addDeviceInterest", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:PGNGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(addDeviceInterestInterest:error:)], @"PusherBeamsApi api (%@) doesn't respond to @selector(addDeviceInterestInterest:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSString *arg_interest = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api addDeviceInterestInterest:arg_interest error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.pusher_beams.PusherBeamsApi.removeDeviceInterest", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:PGNGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(removeDeviceInterestInterest:error:)], @"PusherBeamsApi api (%@) doesn't respond to @selector(removeDeviceInterestInterest:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSString *arg_interest = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api removeDeviceInterestInterest:arg_interest error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.pusher_beams.PusherBeamsApi.getDeviceInterests", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:PGNGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getDeviceInterestsWithError:)], @"PusherBeamsApi api (%@) doesn't respond to @selector(getDeviceInterestsWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSArray<NSString *> *output = [api getDeviceInterestsWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.pusher_beams.PusherBeamsApi.setDeviceInterests", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:PGNGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setDeviceInterestsInterests:error:)], @"PusherBeamsApi api (%@) doesn't respond to @selector(setDeviceInterestsInterests:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSArray<NSString *> *arg_interests = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setDeviceInterestsInterests:arg_interests error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.pusher_beams.PusherBeamsApi.clearDeviceInterests", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:PGNGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(clearDeviceInterestsWithError:)], @"PusherBeamsApi api (%@) doesn't respond to @selector(clearDeviceInterestsWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api clearDeviceInterestsWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.pusher_beams.PusherBeamsApi.onInterestChanges", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:PGNGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(onInterestChangesCallbackId:error:)], @"PusherBeamsApi api (%@) doesn't respond to @selector(onInterestChangesCallbackId:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSString *arg_callbackId = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api onInterestChangesCallbackId:arg_callbackId error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.pusher_beams.PusherBeamsApi.setUserId", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:PGNGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setUserIdUserId:provider:callbackId:error:)], @"PusherBeamsApi api (%@) doesn't respond to @selector(setUserIdUserId:provider:callbackId:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSString *arg_userId = GetNullableObjectAtIndex(args, 0);
        PGNBeamsAuthProvider *arg_provider = GetNullableObjectAtIndex(args, 1);
        NSString *arg_callbackId = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api setUserIdUserId:arg_userId provider:arg_provider callbackId:arg_callbackId error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.pusher_beams.PusherBeamsApi.clearAllState", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:PGNGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(clearAllStateWithError:)], @"PusherBeamsApi api (%@) doesn't respond to @selector(clearAllStateWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api clearAllStateWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.pusher_beams.PusherBeamsApi.onMessageReceivedInTheForeground", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:PGNGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(onMessageReceivedInTheForegroundCallbackId:error:)], @"PusherBeamsApi api (%@) doesn't respond to @selector(onMessageReceivedInTheForegroundCallbackId:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSString *arg_callbackId = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api onMessageReceivedInTheForegroundCallbackId:arg_callbackId error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.pusher_beams.PusherBeamsApi.onMessageReceivedInTheBackground", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:PGNGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(onMessageReceivedInTheBackgroundCallbackId:error:)], @"PusherBeamsApi api (%@) doesn't respond to @selector(onMessageReceivedInTheBackgroundCallbackId:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSString *arg_callbackId = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api onMessageReceivedInTheBackgroundCallbackId:arg_callbackId error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.pusher_beams.PusherBeamsApi.stop", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:PGNGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(stopWithError:)], @"PusherBeamsApi api (%@) doesn't respond to @selector(stopWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api stopWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface CallbackHandlerApi ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@property(nonatomic, strong) NSString *messageChannelSuffix;
@end

@implementation CallbackHandlerApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  return [self initWithBinaryMessenger:binaryMessenger messageChannelSuffix:@""];
}
- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger messageChannelSuffix:(nullable NSString*)messageChannelSuffix{
  self = [self init];
  if (self) {
    _binaryMessenger = binaryMessenger;
    _messageChannelSuffix = [messageChannelSuffix length] == 0 ? @"" : [NSString stringWithFormat: @".%@", messageChannelSuffix];
  }
  return self;
}
- (void)handleCallbackCallbackId:(NSString *)arg_callbackId callbackName:(NSString *)arg_callbackName args:(NSArray<id> *)arg_args completion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = [NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.pusher_beams.CallbackHandlerApi.handleCallback", _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:PGNGetMessagesCodec()];
  [channel sendMessage:@[arg_callbackId ?: [NSNull null], arg_callbackName ?: [NSNull null], arg_args ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
@end

