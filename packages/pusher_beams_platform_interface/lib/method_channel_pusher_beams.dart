// Autogenerated from Pigeon (v1.0.14), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name
// @dart = 2.12
import 'dart:async';
import 'dart:developer';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/services.dart';
import 'package:uuid/uuid.dart';

import 'pusher_beams_platform_interface.dart';

class BeamsAuthProvider {
  String? authUrl;
  Map<String?, String?>? headers;
  Map<String?, String?>? queryParams;
  String? credentials;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['authUrl'] = authUrl;
    pigeonMap['headers'] = headers;
    pigeonMap['queryParams'] = queryParams;
    pigeonMap['credentials'] = credentials;
    return pigeonMap;
  }

  static BeamsAuthProvider decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return BeamsAuthProvider()
      ..authUrl = pigeonMap['authUrl'] as String?
      ..headers = (pigeonMap['headers'] as Map<Object?, Object?>?)?.cast<String?, String?>()
      ..queryParams = (pigeonMap['queryParams'] as Map<Object?, Object?>?)?.cast<String?, String?>()
      ..credentials = pigeonMap['credentials'] as String?;
  }
}

class _PusherBeamsApiCodec extends StandardMessageCodec {
  const _PusherBeamsApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is BeamsAuthProvider) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return BeamsAuthProvider.decode(readValue(buffer)!);

      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class PusherBeamsApi extends PusherBeamsPlatform {
  /// Constructor for [PusherBeamsApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  PusherBeamsApi({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _PusherBeamsApiCodec();

  @override
  Future<void> start(String instanceId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PusherBeamsApi.start', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap = await channel.send(<Object>[instanceId]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  @override
  Future<Map<String, dynamic>?> getInitialMessage() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PusherBeamsApi.getInitialMessage', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap = await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return (replyMap['result'] as Map<Object?, Object?>?)?.cast<String, dynamic>();
    }
  }

  @override
  Future<void> addDeviceInterest(String interest) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PusherBeamsApi.addDeviceInterest', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap = await channel.send(<Object>[interest]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  @override
  Future<void> removeDeviceInterest(String interest) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PusherBeamsApi.removeDeviceInterest', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap = await channel.send(<Object>[interest]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  @override
  Future<List<String?>> getDeviceInterests() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PusherBeamsApi.getDeviceInterests', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap = await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return (replyMap['result'] as List<Object?>?)!.cast<String?>();
    }
  }

  @override
  Future<void> setDeviceInterests(List<String?> interests) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PusherBeamsApi.setDeviceInterests', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap = await channel.send(<Object>[interests]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  @override
  Future<void> clearDeviceInterests() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PusherBeamsApi.clearDeviceInterests', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap = await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  @override
  Future<void> onInterestChanges(String callbackId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PusherBeamsApi.onInterestChanges', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap = await channel.send(<Object>[callbackId]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  @override
  Future<void> setUserId(String userId, BeamsAuthProvider provider, String callbackId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PusherBeamsApi.setUserId', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object>[userId, provider, callbackId]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  @override
  Future<void> clearAllState() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PusherBeamsApi.clearAllState', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap = await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  @override
  Future<void> onMessageReceivedInTheForeground(String callbackId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PusherBeamsApi.onMessageReceivedInTheForeground', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap = await channel.send(<Object>[callbackId]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  @override
  Future<void> onMessageReceivedInTheBackground(String callbackId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PusherBeamsApi.onMessageReceivedInTheBackground', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap = await channel.send(<Object>[callbackId]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  @override
  Future<void> stop() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PusherBeamsApi.stop', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap = await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }
}

class _CallbackHandlerApiCodec extends StandardMessageCodec {
  const _CallbackHandlerApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is BeamsAuthProvider) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return BeamsAuthProvider.decode(readValue(buffer)!);

      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class CallbackHandlerApi {
  static const MessageCodec<Object?> codec = _CallbackHandlerApiCodec();

  void handleCallback(String callbackId, String callbackName, List<Object?> args);
  static void setup(CallbackHandlerApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.CallbackHandlerApi.handleCallback', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.CallbackHandlerApi.handleCallback was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_callbackId = (args[0] as String?);
          assert(arg_callbackId != null,
              'Argument for dev.flutter.pigeon.CallbackHandlerApi.handleCallback was null, expected non-null String.');
          final String? arg_callbackName = (args[1] as String?);
          assert(arg_callbackName != null,
              'Argument for dev.flutter.pigeon.CallbackHandlerApi.handleCallback was null, expected non-null String.');
          final List<Object?>? arg_args = (args[2] as List<Object?>?);
          assert(arg_args != null,
              'Argument for dev.flutter.pigeon.CallbackHandlerApi.handleCallback was null, expected non-null List<Object?>.');
          api.handleCallback(arg_callbackId!, arg_callbackName!, arg_args!);
          return;
        });
      }
    }
  }
}

class AndroidPusherBeamsPlugin extends PusherBeamsApi with CallbackHandlerApi {
  /// Registers this implementation as the plugin instance.
  static void registerWith() {
    PusherBeamsPlatform.instance = AndroidPusherBeamsPlugin();
  }

  /// Stores the ids and the [Function]s to call back.
  static final Map<String, Function> _callbacks = {};

  @override
  Future<bool> start(String instanceId) async {
    await super.start(instanceId);
    return true;
  }

  @override
  Future<Map<String, dynamic>?> getInitialMessage() async {
    return await super.getInitialMessage();
  }

  Future<void> setUser(String userId, BeamsAuthProvider provider, OnUserCallback callback) async {
    final callbackId = const Uuid().v4();

    _callbacks[callbackId] = callback;

    await super.setUserId(userId, provider, callbackId);
  }

  @override
  Future<void> setDeviceInterests(List<String?> interests) async {
    await super.setDeviceInterests(interests);
  }

  @override
  Future<void> clearDeviceInterests() async {
    await super.clearDeviceInterests();
  }

  @override
  Future<void> removeDeviceInterest(String interest) async {
    await super.removeDeviceInterest(interest);
  }

  @override
  Future<List<String?>> getDeviceInterests() async {
    return await super.getDeviceInterests();
  }

  @override
  Future<void> clearAllState() async {
    await super.clearAllState();
    _callbacks.clear();
  }

  @override
  Future<void> addDeviceInterest(String interest) async {
    await super.addDeviceInterest(interest);
  }

  Future<void> onInterestChanging(OnInterestsChange callback) async {
    final callbackId = const Uuid().v4();

    _callbacks[callbackId] = callback;

    await super.onInterestChanges(callbackId);
  }

  Future<void> onDidReceiveNotificationResponse(OnMessageReceivedInTheForeground callback) async {
    final callbackId = const Uuid().v4();

    _callbacks[callbackId] = callback;
    await super.onMessageReceivedInTheForeground(callbackId);
  }

  Future<void> onDidReceiveBackgroundNotificationResponse(OnMessageReceivedInTheBackground callback) async {
    final callbackId = const Uuid().v4();

    _callbacks[callbackId] = callback;

    await super.onMessageReceivedInTheBackground(callbackId);
  }

  @override
  Future<void> stop() async {
    await super.stop();
    _callbacks.clear();
  }

  /// Handler which receives callbacks from the native platforms.
  /// This currently supports [onInterestChanges] and [setUserId] callbacks
  /// but by default it just call the [Function] set.
  ///
  /// **You're not supposed to use this**
  @override
  void handleCallback(String callbackId, String callbackName, List args) {
    final callback = _callbacks[callbackId]!;

    switch (callbackName) {
      case "onInterestChanges":
        callback((args[0] as List<Object?>).cast<String>());
        return;
      case "setUserId":
        callback(args[0] as String?);
        return;
      case "onMessageReceivedInTheForeground":
        callback((args[0] as Map<Object?, Object?>));
        return;
      case "onMessageReceivedInTheBackground":
        callback((args[0] as Map<Object?, Object?>));
        return;
      default:
        callback();
        return;
    }
  }
}
