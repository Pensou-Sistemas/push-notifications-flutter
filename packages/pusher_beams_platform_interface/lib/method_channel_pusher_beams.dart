// Autogenerated from Pigeon (v22.4.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

import 'pusher_beams_platform_interface.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

class BeamsAuthProvider {
  BeamsAuthProvider({
    this.authUrl,
    this.headers,
    this.queryParams,
    this.credentials,
  });

  String? authUrl;
  Map<String?, String?>? headers;
  Map<String?, String?>? queryParams;
  String? credentials;

  Object encode() {
    return <Object?>[
      authUrl,
      headers,
      queryParams,
      credentials,
    ];
  }

  static BeamsAuthProvider decode(Object result) {
    result as List<Object?>;
    return BeamsAuthProvider(
      authUrl: result[0] as String?,
      headers: (result[1] as Map<Object?, Object?>?)?.cast<String?, String?>(),
      queryParams: (result[2] as Map<Object?, Object?>?)?.cast<String?, String?>(),
      credentials: result[3] as String?,
    );
  }
}

class PusherBeamsApi extends PusherBeamsPlatform {
  /// Constructor for [PusherBeamsApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  PusherBeamsApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : _binaryMessenger = binaryMessenger,
        _messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> channelCodec = _PigeonCodec();

  final String _messageChannelSuffix;

  @override
  Future<void> start(String instanceId) async {
    final String channelName = 'dev.flutter.pigeon.pusher_beams.PusherBeamsApi.start$_messageChannelSuffix';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      channelCodec,
      binaryMessenger: _binaryMessenger,
    );
    final List<Object?>? _replyList = await channel.send(<Object?>[instanceId]) as List<Object?>?;
    if (_replyList == null) {
      throw _createConnectionError(channelName);
    } else if (_replyList.length > 1) {
      throw PlatformException(
        code: _replyList[0]! as String,
        message: _replyList[1] as String?,
        details: _replyList[2],
      );
    } else {
      return;
    }
  }

  @override
  Future<Map<String, dynamic>?> getInitialMessage() async {
    final String channelName = 'dev.flutter.pigeon.pusher_beams.PusherBeamsApi.getInitialMessage$_messageChannelSuffix';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      channelCodec,
      binaryMessenger: _binaryMessenger,
    );
    final List<Object?>? _replyList = await channel.send(null) as List<Object?>?;
    if (_replyList == null) {
      throw _createConnectionError(channelName);
    } else if (_replyList.length > 1) {
      throw PlatformException(
        code: _replyList[0]! as String,
        message: _replyList[1] as String?,
        details: _replyList[2],
      );
    } else if (_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (_replyList[0] as Map<Object?, Object?>?)!.cast<String, dynamic>();
    }
  }

  @override
  Future<void> addDeviceInterest(String interest) async {
    final String channelName = 'dev.flutter.pigeon.pusher_beams.PusherBeamsApi.addDeviceInterest$_messageChannelSuffix';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      channelCodec,
      binaryMessenger: _binaryMessenger,
    );
    final List<Object?>? _replyList = await channel.send(<Object?>[interest]) as List<Object?>?;
    if (_replyList == null) {
      throw _createConnectionError(channelName);
    } else if (_replyList.length > 1) {
      throw PlatformException(
        code: _replyList[0]! as String,
        message: _replyList[1] as String?,
        details: _replyList[2],
      );
    } else {
      return;
    }
  }

  @override
  Future<void> removeDeviceInterest(String interest) async {
    final String channelName =
        'dev.flutter.pigeon.pusher_beams.PusherBeamsApi.removeDeviceInterest$_messageChannelSuffix';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      channelCodec,
      binaryMessenger: _binaryMessenger,
    );
    final List<Object?>? _replyList = await channel.send(<Object?>[interest]) as List<Object?>?;
    if (_replyList == null) {
      throw _createConnectionError(channelName);
    } else if (_replyList.length > 1) {
      throw PlatformException(
        code: _replyList[0]! as String,
        message: _replyList[1] as String?,
        details: _replyList[2],
      );
    } else {
      return;
    }
  }

  @override
  Future<List<String?>> getDeviceInterests() async {
    final String channelName =
        'dev.flutter.pigeon.pusher_beams.PusherBeamsApi.getDeviceInterests$_messageChannelSuffix';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      channelCodec,
      binaryMessenger: _binaryMessenger,
    );
    final List<Object?>? _replyList = await channel.send(null) as List<Object?>?;
    if (_replyList == null) {
      throw _createConnectionError(channelName);
    } else if (_replyList.length > 1) {
      throw PlatformException(
        code: _replyList[0]! as String,
        message: _replyList[1] as String?,
        details: _replyList[2],
      );
    } else if (_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (_replyList[0] as List<Object?>?)!.cast<String>();
    }
  }

  @override
  Future<void> setDeviceInterests(List<String> interests) async {
    final String channelName =
        'dev.flutter.pigeon.pusher_beams.PusherBeamsApi.setDeviceInterests$_messageChannelSuffix';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      channelCodec,
      binaryMessenger: _binaryMessenger,
    );
    final List<Object?>? _replyList = await channel.send(<Object?>[interests]) as List<Object?>?;
    if (_replyList == null) {
      throw _createConnectionError(channelName);
    } else if (_replyList.length > 1) {
      throw PlatformException(
        code: _replyList[0]! as String,
        message: _replyList[1] as String?,
        details: _replyList[2],
      );
    } else {
      return;
    }
  }

  @override
  Future<void> clearDeviceInterests() async {
    final String channelName =
        'dev.flutter.pigeon.pusher_beams.PusherBeamsApi.clearDeviceInterests$_messageChannelSuffix';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      channelCodec,
      binaryMessenger: _binaryMessenger,
    );
    final List<Object?>? _replyList = await channel.send(null) as List<Object?>?;
    if (_replyList == null) {
      throw _createConnectionError(channelName);
    } else if (_replyList.length > 1) {
      throw PlatformException(
        code: _replyList[0]! as String,
        message: _replyList[1] as String?,
        details: _replyList[2],
      );
    } else {
      return;
    }
  }

  @override
  Future<void> onInterestChanges(OnInterestsChange callback) async {
    final String channelName = 'dev.flutter.pigeon.pusher_beams.PusherBeamsApi.onInterestChanges$_messageChannelSuffix';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      channelCodec,
      binaryMessenger: _binaryMessenger,
    );
    final List<Object?>? _replyList = await channel.send(<Object?>[callback]) as List<Object?>?;
    if (_replyList == null) {
      throw _createConnectionError(channelName);
    } else if (_replyList.length > 1) {
      throw PlatformException(
        code: _replyList[0]! as String,
        message: _replyList[1] as String?,
        details: _replyList[2],
      );
    } else {
      return;
    }
  }

  @override
  Future<void> setUserId(String userId, BeamsAuthProvider provider, OnUserCallback callback) async {
    final String channelName = 'dev.flutter.pigeon.pusher_beams.PusherBeamsApi.setUserId$_messageChannelSuffix';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      channelCodec,
      binaryMessenger: _binaryMessenger,
    );
    final List<Object?>? _replyList = await channel.send(<Object?>[userId, provider, callback]) as List<Object?>?;
    if (_replyList == null) {
      throw _createConnectionError(channelName);
    } else if (_replyList.length > 1) {
      throw PlatformException(
        code: _replyList[0]! as String,
        message: _replyList[1] as String?,
        details: _replyList[2],
      );
    } else {
      return;
    }
  }

  @override
  Future<void> clearAllState() async {
    final String channelName = 'dev.flutter.pigeon.pusher_beams.PusherBeamsApi.clearAllState$_messageChannelSuffix';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      channelCodec,
      binaryMessenger: _binaryMessenger,
    );
    final List<Object?>? _replyList = await channel.send(null) as List<Object?>?;
    if (_replyList == null) {
      throw _createConnectionError(channelName);
    } else if (_replyList.length > 1) {
      throw PlatformException(
        code: _replyList[0]! as String,
        message: _replyList[1] as String?,
        details: _replyList[2],
      );
    } else {
      return;
    }
  }

  @override
  Future<void> onMessageReceivedInTheForeground(OnMessageReceivedInTheForeground callback) async {
    final String channelName =
        'dev.flutter.pigeon.pusher_beams.PusherBeamsApi.onMessageReceivedInTheForeground$_messageChannelSuffix';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      channelCodec,
      binaryMessenger: _binaryMessenger,
    );
    final List<Object?>? _replyList = await channel.send(<Object?>[callback]) as List<Object?>?;
    if (_replyList == null) {
      throw _createConnectionError(channelName);
    } else if (_replyList.length > 1) {
      throw PlatformException(
        code: _replyList[0]! as String,
        message: _replyList[1] as String?,
        details: _replyList[2],
      );
    } else {
      return;
    }
  }

  @override
  Future<void> onMessageReceivedInTheBackground(OnMessageReceivedInTheBackground callback) async {
    final String channelName =
        'dev.flutter.pigeon.pusher_beams.PusherBeamsApi.onMessageReceivedInTheBackground$_messageChannelSuffix';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      channelCodec,
      binaryMessenger: _binaryMessenger,
    );
    final List<Object?>? _replyList = await channel.send(<Object?>[callback]) as List<Object?>?;
    if (_replyList == null) {
      throw _createConnectionError(channelName);
    } else if (_replyList.length > 1) {
      throw PlatformException(
        code: _replyList[0]! as String,
        message: _replyList[1] as String?,
        details: _replyList[2],
      );
    } else {
      return;
    }
  }

  @override
  Future<void> stop() async {
    final String channelName = 'dev.flutter.pigeon.pusher_beams.PusherBeamsApi.stop$_messageChannelSuffix';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      channelCodec,
      binaryMessenger: _binaryMessenger,
    );
    final List<Object?>? _replyList = await channel.send(null) as List<Object?>?;
    if (_replyList == null) {
      throw _createConnectionError(channelName);
    } else if (_replyList.length > 1) {
      throw PlatformException(
        code: _replyList[0]! as String,
        message: _replyList[1] as String?,
        details: _replyList[2],
      );
    } else {
      return;
    }
  }
}

class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    } else if (value is BeamsAuthProvider) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129:
        return BeamsAuthProvider.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class CallbackHandlerApi {
  static const MessageCodec<Object?> codec = _PigeonCodec();

  void handleCallback(String callbackId, String callbackName, List<Object?> args);

  static void setUp(
    CallbackHandlerApi? api, {
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.pusher_beams.CallbackHandlerApi.handleCallback$messageChannelSuffix', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.pusher_beams.CallbackHandlerApi.handleCallback was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_callbackId = (args[0] as String?);
          assert(arg_callbackId != null,
              'Argument for dev.flutter.pigeon.pusher_beams.CallbackHandlerApi.handleCallback was null, expected non-null String.');
          final String? arg_callbackName = (args[1] as String?);
          assert(arg_callbackName != null,
              'Argument for dev.flutter.pigeon.pusher_beams.CallbackHandlerApi.handleCallback was null, expected non-null String.');
          final List<Object?>? arg_args = (args[2] as List<Object?>?);
          assert(arg_args != null,
              'Argument for dev.flutter.pigeon.pusher_beams.CallbackHandlerApi.handleCallback was null, expected non-null List<Object?>.');
          try {
            api.handleCallback(arg_callbackId!, arg_callbackName!, arg_args!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
